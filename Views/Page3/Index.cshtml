@{
  ViewData["Title"] = "Manual Page";
}
@{
  var treeViewData = ViewBag.TreeViewData;
  var assetsPath = ViewBag.AssetsPath;
}
@section VendorStyles {
  <link rel="stylesheet" href="~/vendor/libs/tagify/tagify.css" />
  <link rel="stylesheet" href="~/vendor/libs/jstree/jstree.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
}
@section VendorScripts {
  <script src="~/vendor/libs/tagify/tagify.js"></script>
  <script src="~/vendor/libs/jstree/jstree.js"></script>
}
@section PageScripts {
 <script src="~/js/forms-tagify.js"></script>
 <script src="~/js/extended-ui-treeview.js"></script>
}
@* ************** Content ************** *@


<div>
  <!-- Tree View Section -->
  <div class="col-md-4 col-12">
    <div class="card mb-6">
      <div class="card-body" style="height:170px">
        <!-- #region >-->
        <div>
          <div class="d-flex align-items-center mb-3">
            <ejs-textbox id="textbox" placeholder="Search" cssClass="e-corner me-2"></ejs-textbox>
            <button type="button" class="btn btn-outline-primary" onclick="SearchTree()">
              <i class="bi bi-search"></i>
            </button>
          </div>

        </div>
        <button id="addNew" class="btn btn-primary me-3" data-bs-toggle="offcanvas" data-bs-target="#offcanvasAddDoc"
          disabled>Add
          New Doc</button>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalEditDoc"
          data-doc-itemid=3345>
          Redigera Dokument
        </button>

      </div>
    </div>

    <div class="card">
      <h5 class="card-header">Manual</h5>
      <div class="card-body treeview-body" style="height:570px">

        <ejs-treeview id="Treedata" showCheckBox="true" , allowDragAndDrop="true" allowTextWrap="true" allowEditing="true"
          nodeSelected=getSelectedNode>
          <e-treeview-fields dataSource="@treeViewData" id="id" parentId="pid" text="fullName" hasChildren="hasChild"
            isChecked="Checked" contextmenu="true" iconCss="icon" expanded="expanded"></e-treeview-fields>
        </ejs-treeview>


      </div>
    </div>
  </div>

  <!-- Word Processor Section -->
  <div class="col-md-8 col-12">
    <div class="card mb-6">

      <div class="card-body">
        <ejs-documenteditorcontainer id="container" serviceUrl="/api/DocumentEditor/" showPropertiesPane=false
          enableToolbar=false created="onCreated" height="800px" enableEditor="true" isReadOnly="true">
        </ejs-documenteditorcontainer>

      </div>
    </div>
  </div>
</div>
<!-- Add this before the dialog component -->
<div id="dialog-target"></div>

<!-- Offcanvas for Adding a Document -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasAddDoc" aria-labelledby="offcanvasAddDocLabel">
  <div class="offcanvas-header">
    <h5 id="offcanvasAddDocLabel" class="offcanvas-title">L√§gg till dokument</h5>
    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body p-6">
    <form id="addDocForm">
      <div class="mb-3">


        <ul class="nav nav-tabs mb-6 rounded-0">
          <li class="nav-item">
            <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#tab-update">
              <i class="bx bx-edit bx-sm me-1_5"></i>
              <span class="align-middle">Add Doc</span>
            </button>
          </li>
          <li class="nav-item">
            <button class="nav-link" data-bs-toggle="tab" data-bs-target="#tab-activity">
              <i class="bx bx-bar-chart bx-sm me-1_5"></i>
              <span class="align-middle">Extra Settings</span>
            </button>
          </li>
        </ul>

      </div>
      <div class="tab-content">
        <div class="tab-pane fade show active" id="tab-update">
          <div class="mb-6">
            <label for="docName" class="form-label">Dokumentnamn</label>
            <input type="text" class="form-control" id="docName" name="docName" placeholder="Ange dokumentnamn"
              required>
          </div>
          <div class="mb-6">
            <label for="docNr" class="form-label">ID-nummer</label>
            @{
                 Console.WriteLine("Parent Node ID");
              // Try to get the parent node id from ViewBag or set a default value
              var pnodeid = ViewBag.PNodeId ?? 0;
              Console.WriteLine($"Parent Node ID: {pnodeid}");

              var nextDocNr = $"{pnodeid}{((treeViewData != null && ((ICollection<object>)treeViewData).Count > 0) ? ViewBag.NodeNr + 1 : 1)}";
            }
            <input type="text" class="form-control" id="docNr" name="docNr" placeholder="Ange ID-nummer"
              value="@nextDocNr" required>
                   </div>
          <div class="mb-6">
            <label for="docType" class="form-label">Filtyp</label>
            <select class="form-select" id="docType" name="docType" required>
              <option value="Folder" data-icon="bi bi-folder">üìÅ Mapp</option>
              <option value="Document" selected data-icon="bi bi-file-earmark-text">üìù Text</option>
              <option value="Spreadsheet" data-icon="bi bi-file-earmark-excel">üìä Kalkyl</option>
              <option value="Diagram" data-icon="bi bi-diagram-3">üîó Fl√∂desschema</option>
            </select>
                 </div>
          <div class="mb-6">
            <label for="docLayout" class="form-label">Orientering </label>
            <select class="form-select" id="docLayout" name="docLayout" required>
              <option value="Portrait" selected data-icon="bi bi-file-earmark-text">üßæ St√•ende</option>
              <option value="Landscape" data-icon="bi bi-file-earmark-richtext">üñºÔ∏è Liggande</option>
            </select>
                 </div>
          <div class="mb-6">
            <label for="docPermission" class="form-label">Beh√∂righet</label>
            <select class="form-select" id="docPermission" name="docPermnission" required>
              <option value="AllUsers" selected data-icon="bi bi-people">
                üë• Alla anv√§ndare med r√§ttigheter kan redigera och publicera
              </option>
              <option value="Manager" data-icon="bi bi-person-badge">
                üëî Endast ledningen kan redigera och publicera
              </option>
            </select>
          </div>
          <div class="mb-6">
            <label for="docDescription" class="form-label">Beskrivning</label>
            <textarea class="form-control" id="docDescription" name="docDescription"
              placeholder="Ange dokumentbeskrivning"></textarea>
          </div>
        </div>
        <div class="tab-pane fade" id="tab-activity">
          <!-- Extra settings can go here -->
          <div class="mb-6">
            <label for="docRestriction" class="form-label">Restrictions</label>
            <select class="form-select" id="docRestriction" name="docRestriction" required>
              <option value="None" selected>No restrictions</option>
              <option value="NoExportPdf">Cannot export to PDF</option>
              <option value="NoPrint">Cannot Print</option>
            </select>


          </div>
          <div class="mb-6">
            <label for="TagifyCustomInlineSuggestion" class="form-label">Custom Inline Suggestions</label>
            <input id="TagifyCustomInlineSuggestion" name="TagifyCustomInlineSuggestion" class="form-control" placeholder="select technologies" value="Doc, Drawing,#1F3763 Spreadsheet">
          </div>
        </div>

        <button type="submit" class="btn btn-primary">Skapa</button>
      </div>
    </form>
  </div>
</div>


<!-- Syncfusion Dialog -->
<ejs-dialog id="docEditorDialog" header="Word Processor" isModal=true visible="false" showCloseIcon="true" width="100%"
  height="100%" target="#dialog-target" cssClass="custom-editor-dialog">
  <e-content-template height="100%">
    <div style="height:100%; width:100%;">
      <!-- Container must fill height -->
      <div style="height:80%; width:80%;">
        <ejs-documenteditorcontainer id="docEditor" enableToolbar=true height="80%" serviceUrl="/api/DocumentEditor/"
          zIndex="3000" created="onEditorCreated">
        </ejs-documenteditorcontainer>
      </div>
    </div>
  </e-content-template>
</ejs-dialog>



<script>
  document.getElementById('addDocForm').addEventListener('submit', function (e) {
    e.preventDefault(); // Prevent default form submission

    var docName = document.getElementById('docName').value;
    // TODO: Add your logic to save the document (AJAX, fetch, etc.)


    // Optionally close the offcanvas
    var offcanvasEl = document.getElementById('offcanvasAddDoc');
    var bsOffcanvas = bootstrap.Offcanvas.getOrCreateInstance(offcanvasEl);
    bsOffcanvas.hide();

    var treeObj = document.getElementById('Treedata').ej2_instances[0];

    selNode = getSelectedNode();
         alert('Document name: ' + docName);
    treeObj.addNodes([{ id: 29, pid: selNode.id, name: docName }], treeObj.selectedNodes[0]);
  });

  var documenteditor;
  function EditDoc() {

    @* var documenteditorElement = document.getElementById("container");
    container = documenteditorElement.ej2_instances[0];
    documenteditor = container.documentEditor;
    // To insert text in cursor position
    container.enableToolbar = true;
    container.toolbarItems = ['New', 'Open', 'Undo', 'Redo'];
    container.documentEditor.isReadOnly = false;
    // Load a file (for example, a Word document in SFDT format)
    // You need to fetch the file content (sfdt) from your server or a file input
    // Example: load from a URL via AJAX
    fetch('/test1.sfdt')
      .then(response => response.json())
      .then(sfdt => {
        container.documentEditor.open(sfdt);
      }); *@
      $.ajax({
        url: '/Page3/EditDocModal',
        type: 'GET',
        success: function (result) {
          // Create a container for the modal if it doesn't exist
          var modalContainer = document.getElementById('editDocModalContainer');
          if (!modalContainer) {
            modalContainer = document.createElement('div');
            modalContainer.id = 'editDocModalContainer';
            document.body.appendChild(modalContainer);
          }
          modalContainer.innerHTML = result;

          // Show the modal (assuming Bootstrap modal)
          var modalElement = document.getElementById('editDocModal');
          if (modalElement) {
            var modal = new bootstrap.Modal(modalElement);
            modal.show();
          }
        },
        error: function () {
          alert('Failed to load the edit document modal.');
        }
      });

  }
  function onCreated() {

    var documenteditor;
    document.addEventListener('DOMContentLoaded', function () {
      documenteditor = documenteditorElement.ej2_instances[0];
      var documenteditorElement = document.getElementById("container");
      container = documenteditorElement.ej2_instances[0];
      console.log("Document editor is ready.");
      var sfdt = { "sections": [{ "sectionFormat": { "pageWidth": 612, "pageHeight": 792, "leftMargin": 72, "rightMargin": 72, "topMargin": 72, "bottomMargin": 72, "differentFirstPage": false, "differentOddAndEvenPages": false, "headerDistance": 36, "footerDistance": 36, "bidi": false }, "blocks": [{ "paragraphFormat": { "afterSpacing": 30, "styleName": "Heading 1", "listFormat": {} }, "characterFormat": {}, "inlines": [{ "characterFormat": {}, "text": "Adventure Works Cycles" }] }], "headersFooters": { "header": { "blocks": [{ "paragraphFormat": { "listFormat": {} }, "characterFormat": {}, "inlines": [] }] }, "footer": { "blocks": [{ "paragraphFormat": { "listFormat": {} }, "characterFormat": {}, "inlines": [] }] } } }], "characterFormat": { "bold": false, "italic": false, "fontSize": 11, "fontFamily": "Calibri", "underline": "None", "strikethrough": "None", "baselineAlignment": "Normal", "highlightColor": "NoColor", "fontColor": "empty", "fontSizeBidi": 11, "fontFamilyBidi": "Calibri", "allCaps": false }, "paragraphFormat": { "leftIndent": 0, "rightIndent": 0, "firstLineIndent": 0, "textAlignment": "Left", "beforeSpacing": 0, "afterSpacing": 0, "lineSpacing": 1.0791666507720947, "lineSpacingType": "Multiple", "listFormat": {}, "bidi": false }, "defaultTabWidth": 36, "trackChanges": false, "enforcement": false, "hashValue": "", "saltValue": "", "formatting": false, "protectionType": "NoProtection", "dontUseHTMLParagraphAutoSpacing": false, "formFieldShading": true, "styles": [{ "name": "Normal", "type": "Paragraph", "paragraphFormat": { "lineSpacing": 1.149999976158142, "lineSpacingType": "Multiple", "listFormat": {} }, "characterFormat": { "fontFamily": "Calibri" }, "next": "Normal" }, { "name": "Default Paragraph Font", "type": "Character", "characterFormat": {} }, { "name": "Heading 1 Char", "type": "Character", "characterFormat": { "fontSize": 16, "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Default Paragraph Font" }, { "name": "Heading 1", "type": "Paragraph", "paragraphFormat": { "beforeSpacing": 12, "afterSpacing": 0, "outlineLevel": "Level1", "listFormat": {} }, "characterFormat": { "fontSize": 16, "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Normal", "link": "Heading 1 Char", "next": "Normal" }, { "name": "Heading 2 Char", "type": "Character", "characterFormat": { "fontSize": 13, "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Default Paragraph Font" }, { "name": "Heading 2", "type": "Paragraph", "paragraphFormat": { "beforeSpacing": 2, "afterSpacing": 6, "outlineLevel": "Level2", "listFormat": {} }, "characterFormat": { "fontSize": 13, "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Normal", "link": "Heading 2 Char", "next": "Normal" }, { "name": "Heading 3", "type": "Paragraph", "paragraphFormat": { "leftIndent": 0, "rightIndent": 0, "firstLineIndent": 0, "textAlignment": "Left", "beforeSpacing": 2, "afterSpacing": 0, "lineSpacing": 1.0791666507720947, "lineSpacingType": "Multiple", "outlineLevel": "Level3", "listFormat": {} }, "characterFormat": { "fontSize": 12, "fontFamily": "Calibri Light", "fontColor": "#1F3763" }, "basedOn": "Normal", "link": "Heading 3 Char", "next": "Normal" }, { "name": "Heading 3 Char", "type": "Character", "characterFormat": { "fontSize": 12, "fontFamily": "Calibri Light", "fontColor": "#1F3763" }, "basedOn": "Default Paragraph Font" }, { "name": "Heading 4", "type": "Paragraph", "paragraphFormat": { "leftIndent": 0, "rightIndent": 0, "firstLineIndent": 0, "textAlignment": "Left", "beforeSpacing": 2, "afterSpacing": 0, "lineSpacing": 1.0791666507720947, "lineSpacingType": "Multiple", "outlineLevel": "Level4", "listFormat": {} }, "characterFormat": { "italic": true, "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Normal", "link": "Heading 4 Char", "next": "Normal" }, { "name": "Heading 4 Char", "type": "Character", "characterFormat": { "italic": true, "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Default Paragraph Font" }, { "name": "Heading 5", "type": "Paragraph", "paragraphFormat": { "leftIndent": 0, "rightIndent": 0, "firstLineIndent": 0, "textAlignment": "Left", "beforeSpacing": 2, "afterSpacing": 0, "lineSpacing": 1.0791666507720947, "lineSpacingType": "Multiple", "outlineLevel": "Level5", "listFormat": {} }, "characterFormat": { "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Normal", "link": "Heading 5 Char", "next": "Normal" }, { "name": "Heading 5 Char", "type": "Character", "characterFormat": { "fontFamily": "Calibri Light", "fontColor": "#2F5496" }, "basedOn": "Default Paragraph Font" }, { "name": "Heading 6", "type": "Paragraph", "paragraphFormat": { "leftIndent": 0, "rightIndent": 0, "firstLineIndent": 0, "textAlignment": "Left", "beforeSpacing": 2, "afterSpacing": 0, "lineSpacing": 1.0791666507720947, "lineSpacingType": "Multiple", "outlineLevel": "Level6", "listFormat": {} }, "characterFormat": { "fontFamily": "Calibri Light", "fontColor": "#1F3763" }, "basedOn": "Normal", "link": "Heading 6 Char", "next": "Normal" }, { "name": "Heading 6 Char", "type": "Character", "characterFormat": { "fontFamily": "Calibri Light", "fontColor": "#1F3763" }, "basedOn": "Default Paragraph Font" }], "lists": [], "abstractLists": [], "comments": [], "revisions": [], "customXml": [] };
      // open the default document.
      container.open(JSON.stringify(sfdt));
    });

  }

  function filterTreeNodes(searchString) {
    // Get the TreeView instance
    var treeObj = document.getElementById('Treedata').ej2_instances[0];

    // Reset all nodes to visible before applying the filter
    treeObj.expandAll();
    treeObj.collapseAll();
    var allNodes = treeObj.element.querySelectorAll('.e-list-item');
    allNodes.forEach(node => node.style.display = '');

    // Filter nodes based on the search string
    if (searchString.trim() !== '') {
      var matchedNodes = treeObj.element.querySelectorAll('.e-list-item');
      matchedNodes.forEach(node => {

        var nodeText = node.querySelector('.e-text-content').innerText;
        if (nodeText.toLowerCase().includes(searchString.toLowerCase())) {

          // If the node matches, ensure it is visible
          console.log(nodeText);
        }
        else {
          // If the node does not match, hide it
          node.style.display = 'none';
        }
      });
    }
  }
  function SearchTree() {
    var searchString = document.getElementById('textbox').ej2_instances[0].value;
    filterTreeNodes(searchString);
  }

  function AddNewDoc() {
    var treeObj = document.getElementById('Treedata').ej2_instances[0];

    selNode = getSelectedNode();
    treeObj.addNodes([{ id: 29, pid: selNode.id, name: 'New Child ' }], treeObj.selectedNodes[0]);

    treeObj.expandNode(treeObj.selectedNodes[0]);


  }
  function SaveDoc() {
    console.log("Saving document...");
    documenteditor.save('sampleFile', 'Sfdt');

  }


  function getSelectedNode() {
    // Get the TreeView instance
    var treeObj = document.getElementById('Treedata').ej2_instances[0];

    // Get the selected nodes
    var selectedNodes = treeObj.selectedNodes;

    if (selectedNodes.length > 0) {
      // Get details of the first selected node
      var selectedNodeDetails = treeObj.getNode(selectedNodes[0]);
      console.log("Selected Node Details:", selectedNodeDetails);
      document.getElementById('addNew').disabled = false;
      return selectedNodeDetails;
    } else {
      console.log("No node is selected.");
      return null;
    }

  }
  function showEditor() {
    var dialog = document.getElementById("docEditorDialog").ej2_instances[0];
    if (dialog) {
      dialog.show();

      setTimeout(function () {
        var editor = document.getElementById("docEditor").ej2_instances?.[0];
        if (editor) {
          console.log("Resizing editor...");
          editor.resize();
        } else {
          console.warn("Editor instance not found");
        }
      }, 300);
    }
  }
  function onEditorCreated() {
    console.log("Document editor is ready.");
  }
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    var input = document.querySelector('#TagifyCustomInlineSuggestion');
    if (input) {
      new Tagify(input);
    }
  });
</script>




<style>
  #docEditor {
    height: 100% !important;
  }

  .offcanvas-body {
    padding: 0;
    height: 100%;
    overflow: hidden;
  }

  .offcanvas {
    width: 80%;
  }

  #offcanvasDocEditorContainer {
    height: 100% !important;
  }

  /* Change font size for all nodes in Syncfusion TreeView */
  .e-treeview .e-list-text {
    font-size: 18px !important;
    /* Set your desired size */
  }

  .treeview-body {
    height: 570px;
    /* or any height you want */
    overflow-y: auto;
    /* enables vertical scrollbar */
    overflow-x: hidden;
    /* prevents horizontal scroll */
  }
</style>

@await Html.PartialAsync("../_Partials/_Modals/ModalEditDoc")
